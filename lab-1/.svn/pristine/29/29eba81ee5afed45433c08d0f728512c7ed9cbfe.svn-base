package cse530a;

import java.sql.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import cse530a.lab1.Main;

public class ExecuteCommand {
	
	private static final Logger LOGGER = Logger.getLogger(Main.class.getName());

	
	/** \set AUTOCOMMIT on command*/
	public static void setAutoCommitOn() {
		/**
		 * If "\set AUTOCOMMIT off" is specified then the database connection 
		 * should have auto-commit turned off.
		 *  If auto-commit is already off then this is a no-op.
		 */	
		if(Main.autocommitStatus == false){
			System.out.println("The auto-commit is already OFF, No operation now");
		} else {
			try {
				Main.conn.setAutoCommit(false);
			} catch (SQLException e) {
				e.printStackTrace();
			}
			System.out.println("The auto-commit is turned OFF");
		}
	} 
	
	
	/** \set AUTOCOMMIT off command*/
	public static void setAutoCommitOff() {
		/**
		 * If auto-commit is off then this will turn it on. (This will implicitly cause a commit.) 
		 * If auto-commit is already on then this is a no-op.
		 */	
		if(Main.autocommitStatus == true){
			System.out.println("The auto-commit is already ON, No operation now");
		} else {
			try {
				Main.conn.setAutoCommit(true);
			} catch (SQLException e) {
				e.printStackTrace();
			}
			System.out.println("The auto-commit is turned ON");
		}
	}
	
	/** select command*/
	public static void executeSelect(String command){
		try {
			Statement stmt = Main.conn.createStatement();	
			try {
				ResultSet rs = stmt.executeQuery(command);
				try {
					ResultSetMetaData metadata = rs.getMetaData(); 
					int count = metadata.getColumnCount();
					/** show the table header */
					for (int i = 1; i <= count; ++i) {
						String label = metadata.getColumnLabel(i);
						System.out.println(label);
					}
					System.out.println();
					/** store the query content*/
					ArrayList<Object[]> results = new ArrayList<Object[]>();
					while (rs.next()) 
					{
						Object[] row = new Object[count];
						for (int i = 0; i < count; ++i) {
							row[i] = rs.getObject(i+1);
						}
						results.add(row);
					}
					/** print the result of each cell*/
					int number_of_rows = results.size();
					for (int i = 0; i < number_of_rows; ++i) {
						Object[] row = results.get(i);
						for (int j = 0; j < count; ++j) {
							System.out.print(row[j]+" ");
						}
						System.out.println();
					}
					System.out.println();
				} finally {
					DatabaseManager.closeResultSet(rs);
				}
			} finally {
				DatabaseManager.closeStatement(stmt);
			}
		} catch (Exception e) {
			LOGGER.log(Level.WARNING, "error", e);
			return;
		}
	}
	
	
}
